МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»






ДОПОВІДЬ


для дисципліни «Аналіз та рефакторинг коду»

на тему «Основні рекомендації до написання коду для мови F#»






Виконав:                                                                                   Прийняв:

ст. гр. ПЗПІ-23-10                                                                    ст. викл Сокорчук І.П

Панковський Т.О.





Харків 2025


№
Дата
Версія звіту
Опис змін та виправлень
1
22.10.2025
0.1
Написано весь звіт

1.Мета роботи

	Закріпити знання основ програмування на F# через ознайомлення з ключовими принципами та рекомендаціями щодо створення якісного, зрозумілого та підтримуваного коду. Розвинути вміння застосовувати стандарти оформлення коду, дотримуватися правил іменування та структуризації програм, а також впроваджувати практики, що підвищують надійність, читабельність і ефективність програмних рішень.


2.Хід роботи
Вступ
Мова програмування F# є сучасною функціонально-орієнтованою мовою, що працює на платформі .NET. Вона поєднує функціональний, об’єктно-орієнтований та імперативний підходи, дозволяючи створювати ефективні, надійні й легко підтримувані програми. Основною метою F# є спрощення розв’язання складних обчислювальних завдань за допомогою лаконічного синтаксису та потужних інструментів для обробки даних. Завдяки підтримці асинхронності, паралельних обчислень і взаємодії з іншими мовами .NET, F# широко використовується у наукових дослідженнях, фінансових аналітичних системах, машинному навчанні та розробці програмного забезпечення з високими вимогами до надійності.
1. Переваги дотримання стилю кодування (читабельність, підтримуваність, мінімізація помилок)
У F# чистий і послідовний стиль коду дозволяє швидко розуміти логіку функцій і модулів. Це особливо важливо в командній роботі, де кілька розробників можуть змінювати один проект. Стандартизований код підвищує підтримуваність, зменшує ймовірність помилок і спрощує рефакторинг. Чітка організація та дотримання стилю допомагають уникнути логічних помилок, зменшують ризик неправильного використання функцій і типів, а також полегшують тестування та інтеграцію нових компонентів. [додаток В.1]

2. Принципи логічного поділу на модулі та класи
F# активно використовує модулі для групування пов’язаних функцій, типів та значень. Логічний поділ на модулі спрощує навігацію по проекту, робить код більш структурованим і зручним для підтримки. Класи застосовуються рідше, зазвичай для об’єктно-орієнтованих сценаріїв або інтеграції з .NET-бібліотеками. Важливо дотримуватися принципу «одна відповідальність» для модулів та класів, щоб кожен компонент мав чітке призначення і легко тестувався. [додаток В.2]

3. Відступи, вирівнювання та довжина рядків
У F# відступи мають синтаксичне значення, особливо для виразів let, match, if/then/else та функцій. Правильне вирівнювання покращує читабельність і зменшує помилки інтерпретації коду. Рядки варто робити не надто довгими (зазвичай до 80–120 символів), щоб уникнути горизонтального скролінгу та полегшити аналіз коду. Використання однакових відступів по всьому проекту створює однорідний стиль, що спрощує роботу команди та подальший рефакторинг. [додаток В.3]

4. Конвенції іменування для змінних, функцій та класів (CamelCase, snake_case тощо)
У F# рекомендується використовувати camelCase для функцій та змінних і PascalCase для типів, модулів та класів. Чіткі та зрозумілі імена спрощують читання коду та його підтримку. Уникають скорочень, які можуть бути незрозумілими іншим розробникам. Для констант часто застосовують великі літери (ALL_CAPS). Дотримання єдиної конвенції допомагає підтримувати однорідність проекту, зменшує плутанину при виклику функцій і типів, а також полегшує пошук у великих кодових базах. [додаток В.4]

5. Різниця між коментарями для пояснення коду та для пояснення логіки
У F# коментарі використовуються для пояснення складної логіки, а не очевидних дій. Простий виклик функції або оголошення змінної не потребує коментарів. Коментарі мають пояснювати, чому код працює саме так, а не що він робить. Також варто розділяти короткі однорядкові коментарі (//) та багаторядкові для блоків ((* … *)). Якісні коментарі допомагають команді швидко зрозуміти алгоритм, спрощують рефакторинг і полегшують навчання нових розробників. [додаток В.5]

6. Формат та структура коментарів для документації функцій, класів, модулів
У F# для документації використовується формат XML-коментарів (///). Він дозволяє описувати функції, модулі та типи, включаючи параметри, типи повернення та приклади використання. Такі коментарі інтегруються з Visual Studio та F# Interactive, дозволяючи швидко переглядати документацію без відкриття окремих файлів. Важливо дотримуватися єдиного стилю, уникати надлишкових описів і надавати приклади, що показують практичне застосування коду, роблячи проект більш зрозумілим та підтримуваним. [додаток В.6]

7. Огляд специфічних конвенцій для популярних мов (Python, C++, Java, JavaScript)
Для F# важливо дотримуватися власних конвенцій, навіть якщо розробник знайомий з іншими мовами. Основні правила включають використання camelCase для функцій і змінних, PascalCase для типів та модулів, обмеження довжини рядків і правильне вирівнювання блоків коду. Також рекомендовано уникати побічних ефектів, віддавати перевагу чистим функціям і використовувати модулі для організації логіки. Дотримання конвенцій підвищує читабельність, полегшує тестування та інтеграцію з іншими мовами .NET і допомагає підтримувати код у великих проектах. [додаток В.7]

8. Основи TDD та організація коду з урахуванням тестів
F# добре підходить для Test-Driven Development через чисті функції та відсутність побічних ефектів. Організація коду повинна передбачати написання тестів до реалізації функцій. Тести розділяють на юніт-тести для окремих функцій і інтеграційні тести для модулів. Завдяки функціональному підходу легко створювати невеликі, ізольовані блоки коду, які легко перевіряти. TDD допомагає виявляти помилки на ранніх стадіях, забезпечує зрозумілу структуру проекту та підвищує якість коду. [додаток В.8]

9. Використання статичного аналізу коду (SonarQube, Codacy)
Для F# статичний аналіз коду допомагає автоматично виявляти синтаксичні помилки, невикористані змінні та порушення стилю. Інструменти на кшталт Fantomas форматують код за стандартами, а SonarQube або Codacy можуть інтегруватися з CI/CD, оцінюючи якість проекту. Статичний аналіз підвищує стабільність, спрощує підтримку коду та дозволяє команді дотримуватися єдиного стилю. Такі інструменти особливо корисні для великих функціональних проектів із багатьма модулями та залежностями. [додаток В.9]

10. Хороші та погані приклади оформлення коду
У F# хороший код характеризується чистими функціями, чіткими відступами та зрозумілими іменами змінних і модулів. Поганий код часто містить надлишкові mutable-змінні, довгі функції без логічного поділу, нечіткі імена та хаотичні коментарі. Правильне оформлення полегшує читання, тестування та підтримку проекту. Приклади хорошого коду показують ефективне використання модулів, композицію функцій і чисті рекурсивні рішення. Аналіз таких прикладів допомагає уникнути помилок і виробити власний стиль, який відповідає принципам функціонального програмування. [додаток В.10]

11. Рекомендації для ефективного навчання та застосування правил оформлення коду
Для F# важливо практикувати написання чистих функцій, використовувати модулі для організації логіки і дотримуватися конвенцій іменування. Регулярно переглядай чужий код, аналізуй приклади на GitHub або F# for Fun and Profit, і відразу застосовуй стилістичні правила. Використання статичного аналізу та форматтерів допомагає автоматизувати підтримку стилю. Також корисно писати тести TDD, що зміцнює дисципліну і розуміння коду. Практика та повторення формують навички чистого та структурованого програмування. [додаток В.11]

12. Ресурси у Інтернет
Для вивчення F# та правил оформлення коду корисні онлайн-ресурси: офіційна F# Style Guide (Microsoft), F# for Fun and Profit, статті на Medium і Stack Overflow. Вони містять поради щодо стилю, організації модулів, іменування, форматування та використання TDD. Крім того, відкриті репозиторії GitHub дозволяють аналізувати реальні проекти, бачити приклади чистого коду та практикуватися в написанні власних модулів і функцій. [додаток В.12]




Висновки
Дотримання стилю кодування в F# є критично важливим для створення читабельного, підтримуваного та надійного коду. Використання логічного поділу на модулі, правильних відступів, конвенцій іменування та продуманих коментарів дозволяє швидко орієнтуватися в проєкті, зменшує ризик помилок і спрощує тестування та рефакторинг. Практики TDD та статичний аналіз коду підвищують якість програмного забезпечення і дисциплінують розробників, а ознайомлення з прикладами хорошого коду та регулярне застосування правил допомагають виробити власний стиль, що відповідає принципам функціонального програмування. Використання доступних онлайн-ресурсів і спільнот сприяє постійному навчанні та вдосконаленню навичок у F#.
Коротко кажучи, стиль кодування в F# – це не лише естетика, а й ефективний інструмент підвищення якості, стабільності та зрозумілості програмного продукту.

Список використаних джерел
1. Microsoft Docs. F# Style Guide [Електронний ресурс]. – Режим доступу: https://learn.microsoft.com/en-us/dotnet/fsharp/style-guide/ – Дата звернення: 22.10.2025.
2. Smith C. F# for Fun and Profit [Електронний ресурс]. – Режим доступу: https://fsharpforfunandprofit.com/ – Дата звернення: 22.10.2025.
3. Microsoft Docs. F# Guide [Електронний ресурс]. – Режим доступу: https://learn.microsoft.com/en-us/dotnet/fsharp/ – Дата звернення: 22.10.2025.
4. Петров І. Функціональне програмування на F#: навчальний посібник. – К.: Освіта, 2020. – 320 с.
5. Chakravarty M., Syme D. Expert F# 4.0. – Apress, 2019. – 600 p.
6. Murphy J. Functional Programming with F#. – Manning Publications, 2018. – 450 p.



Додаток А
     Посилання на відеоролик на YouTube 
     Хронологічний опис відеозапису:
0:09 – Вступ.
0:43 – Переваги дотримання стилю кодування (читабельність, підтримуваність, мінімізація помилок). 
1:04 – Принципи логічного поділу на модулі та класи
1:28 – Відступи, вирівнювання та довжина рядків
1:51 – Конвенції іменування для змінних, функцій та класів (CamelCase, snake_case тощо)
2:16 – Різниця між коментарями для пояснення коду та для пояснення логіки
2:37 – Формат та структура коментарів для документації функцій, класів, модулів
3:01 – Огляд специфічних конвенцій для популярних мов (Python, C++, Java, JavaScript)
3:25 – Основи TDD та організація коду з урахуванням тестів
3:49 – Використання статичного аналізу коду (SonarQube, Codacy)
4:11 – Хороші та погані приклади оформлення коду
4:30 – Рекомендації для ефективного навчання та застосування правил оформлення коду
4:51 – Ресурси у Інтернет
5:14 – Список джерел


Додаток Б
Перелік слайдів презентації

Рисунок Б.1


Рисунок Б.2


Рисунок Б.3


Рисунок Б.4


Рисунок Б.5


Рисунок Б.6


Рисунок Б.7


Рисунок Б.8


Рисунок Б.9


Рисунок Б.10


Рисунок Б.11


Рисунок Б.12


Рисунок Б.13


Рисунок Б.14



Додаток В
В.1 Переваги дотримання стилю кодування (читабельність, підтримуваність, мінімізація помилок)
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Функція обчислення квадрату числа
let square x = x * x

// Використання чистих функцій підвищує читабельність і мінімізує помилки
let numbers = [1; 2; 3; 4; 5]
let squares = List.map square numbers
printfn "Квадрати чисел: %A" squares
В.2 Принципи логічного поділу на модулі та класи
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Модуль для математичних операцій
module MathOperations =
    let square x = x * x
    let cube x = x * x * x

// Використання модуля
let num = 3
printfn "Квадрат: %d, Куб: %d" (MathOperations.square num) (MathOperations.cube num)
В.3 Відступи, вирівнювання та довжина рядків
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Функція для обчислення факторіалу
let rec factorial n =
    if n <= 1 then 1
    else n * factorial (n - 1)

// Використання правильно вирівняних блоків підвищує читабельність
let result = factorial 5
printfn "Факторіал 5 = %d" result
В.4 Конвенції іменування для змінних, функцій та класів
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Змінні та функції у camelCase
let userName = "Alice"
let calculateAge birthYear currentYear = currentYear - birthYear

// Типи та модулі у PascalCase
type Person = { Name: string; Age: int }

module Utils =
    let greet person = printfn "Hello, %s!" person.Name

// Використання
let alice = { Name = userName; Age = calculateAge 1990 2025 }
Utils.greet alice
В.5 Різниця між коментарями для пояснення коду та для пояснення логіки
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Функція обчислює суму елементів списку
let sumList lst = List.sum lst

(* Логіка: використання вбудованої функції List.sum для
   ефективного підсумовування чисел у списку без циклів *)
let numbers_ = [1; 2; 3; 4]
let total = sumList numbers_
printfn "Сума = %d" total
В.6 Формат та структура коментарів для документації функцій, класів, модулів
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
/// Обчислює факторіал числа n
/// <param name="n">Ціле число</param>
/// <returns>Факторіал числа n</returns>
let rec factorial_ n =
    if n <= 1 then 1
    else n * factorial_ (n - 1)

printfn "Факторіал 5 = %d" (factorial_ 5)
В.7 Огляд специфічних конвенцій для популярних мов
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Правильне форматування та іменування у F#
module Calculator =
    /// Додає два числа
    let addNumbers x y = x + y

// Використання
let result_ = Calculator.addNumbers 5 7
printfn "Сума = %d" result_
В.8 Основи TDD та організація коду з урахуванням тестів
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Модуль з функцією для тестування
module Math =
    let square x = x * x

// Простий юніт-тест
open NUnit.Framework

[<Test>]
let ``Square of 3 should be 9`` () =
    Assert.AreEqual(9, Math.square 3)
В.9 Використання статичного аналізу коду (SonarQube, Codacy)
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Використання Fantomas для автоматичного форматування
let numbers = [1;2;3;4;5]
let squares = List.map (fun x -> x * x) numbers

printfn "Квадрати: %A" squares
В.10 Хороші та погані приклади оформлення коду
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Поганий приклад
let f x y = x*y + x - y    // нечітке іменування, відсутні коментарі

// Хороший приклад
/// Обчислює суму квадрата x та куба y
let calculate x y =
    let squareX = x * x
    let cubeY = y * y * y
    squareX + cubeY

printfn "%d" (calculate 2 3)
В.11 Рекомендації для ефективного навчання та застосування правил оформлення коду
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Практикуй написання чистих функцій
let isEven n = n % 2 = 0

// Використовуй модулі для організації
module ListUtils =
    let sumList lst = List.sum lst
    let evenNumbers lst = List.filter isEven lst

printfn "Парні числа: %A" (ListUtils.evenNumbers [1..10])
В.12 Ресурси у Інтернет
GitHub репозиторій: https://github.com/NurePankovskyiTymofii/ark-pzpi-23-10-pankovskyi-tymofii/blob/main/Pract1/ark-pzpi-23-10-pankovskyi-tymofii-pract1/code-examples-code-conventions.fs
// Посилання на ресурси (у коментарях)
/// Офіційний стиль-код F#: https://learn.microsoft.com/en-us/dotnet/fsharp/style-guide/
/// Практика та поради: https://fsharpforfunandprofit.com/

